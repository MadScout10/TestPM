import os
import re
from telegram import Bot
import asyncio

def parse_pytest_log():
    """–ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ª–æ–≥ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    log_file = "pytest_output.log"
    
    if not os.path.exists(log_file):
        return {"error": "–õ–æ–≥ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, ""
    
    with open(log_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    return parse_pytest_content(content), content

def parse_pytest_content(content):
    """–ü–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞ pytest —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    stats = {"passed": 0, "failed": 0, "skipped": 0, "xfailed": 0, "deselected": 0, "total": 0}
    
    lines = content.split('\n')
    
    # 1. –ü–∞—Ä—Å–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
    final_results = []
    for line in reversed(lines):
        if ('passed' in line and 'failed' in line) or ('seconds' in line and ('passed' in line or 'failed' in line)):
            final_results.append(line.strip())
            if len(final_results) >= 3:  # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Ç–æ–≥–æ–≤
                break
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    for result_line in final_results:
        parse_final_line(result_line, stats)
    
    # 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Ç—Ä–æ—á–∫–∞–º (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
    if stats["total"] == 0:
        for line in lines:
            if 'FAILED' in line and '.py::' in line:
                stats["failed"] += 1
            elif 'PASSED' in line and '.py::' in line:
                stats["passed"] += 1
            elif 'SKIPPED' in line and '.py::' in line:
                stats["skipped"] += 1
            elif 'XFAIL' in line and '.py::' in line:
                stats["xfailed"] += 1
    
    # 3. –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    stats["total"] = stats["passed"] + stats["failed"] + stats["skipped"] + stats["xfailed"] + stats["deselected"]
    
    # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    executed_tests = stats["passed"] + stats["failed"] + stats["skipped"] + stats["xfailed"]
    stats["success_rate"] = (stats["passed"] / executed_tests * 100) if executed_tests > 0 else 0
    
    return stats

def parse_final_line(line, stats):
    """–ü–∞—Ä—Å–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É pytest"""
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫:
    # "5 passed, 2 failed, 1 skipped, 1 xfailed in 10.20s"
    # "=== 12 passed, 3 failed, 2 skipped in 45.12s ==="
    # "8 passed, 4 deselected in 30.50s"
    
    patterns = {
        'passed': r'(\d+)\s+passed',
        'failed': r'(\d+)\s+failed',
        'skipped': r'(\d+)\s+skipped', 
        'xfailed': r'(\d+)\s+xfailed',
        'deselected': r'(\d+)\s+deselected',
        'errors': r'(\d+)\s+errors'
    }
    
    for key, pattern in patterns.items():
        match = re.search(pattern, line)
        if match:
            stats[key] = int(match.group(1))

async def send_telegram_report(token, chat_id, report):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    bot = Bot(token=token)
    
    if "error" in report:
        message = f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {report['error']}"
    else:
        message = (
            "üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {report['passed']}\n"
            f"‚ùå –£–ø–∞–≤—à–∏–µ: {report['failed']}\n"
            f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ: {report['skipped']}\n"
            f"üî∂ XFAIL: {report['xfailed']}\n"
            f"üö´ Deselected: {report['deselected']}\n"
            f"üî¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {report['total']}\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['success_rate']:.2f}%"
        )
    
    await bot.send_message(chat_id=chat_id, text=message)

if __name__ == "__main__":
    print("–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ pytest...")
    report, content = parse_pytest_log()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {report}")
    
    asyncio.run(send_telegram_report(
        os.getenv("TELEGRAM_BOT_TOKEN"),
        os.getenv("TELEGRAM_CHAT_ID"),
        report
    ))

