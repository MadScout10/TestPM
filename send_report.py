import yaml
import json
from pathlib import Path
from telegram import Bot
import asyncio
import os
import argparse
import time

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--run-id', help='GitHub Actions Run ID', default=None)
    parser.add_argument('--results-dir', help='Path to results directory', default='results')
    return parser.parse_args()

def parse_allure_results(results_dir, run_id=None):
    print(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ '{results_dir}' –¥–ª—è run_id={run_id}")
    
    stats = {
        "passed": 0,
        "failed": 0,
        "broken": 0,
        "skipped": 0,
        "total": 0
    }

    # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    processed_files = 0

    for result_file in Path(results_dir).glob("*result.*"):
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω run_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if run_id and f"run_{run_id}" not in str(result_file):
                continue
                
            with open(result_file, "r", encoding="utf-8") as f:
                data = json.load(f) if result_file.suffix == ".json" else yaml.safe_load(f)
                
                status = data.get("status", "").lower()
                if status in stats:
                    stats[status] += 1
                    stats["total"] += 1
                    processed_files += 1
                    
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω {result_file.name}: —Å—Ç–∞—Ç—É—Å={status}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {result_file}: {str(e)}")

    print(f"\n–ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files}")
    
    stats["success_rate"] = (stats["passed"] / stats["total"] * 100) if stats["total"] > 0 else 0
    return stats

async def send_telegram_report(token, chat_id, report, report_url=None):
    bot = Bot(token=token)
    
    if "error" in report:
        message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤\n" + report["error"]
    else:
        message = (
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¢–ï–ö–£–©–ï–ì–û –ø—Ä–æ–≥–æ–Ω–∞\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {report['passed']}\n"
            f"‚ùå –£–ø–∞–≤—à–∏–µ: {report['failed']}\n"
            f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: {report['broken']}\n"
            f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ: {report['skipped']}\n"
            f"üî¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {report['total']}\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['success_rate']:.2f}%"
        )
        if report_url:
            message += f"\n\nüìÑ –û—Ç—á–µ—Ç: {report_url}"
    
    await bot.send_message(chat_id=chat_id, text=message)

if __name__ == "__main__":
    args = parse_args()
    print(f"\n–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (Run ID: {args.run_id})...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É run_id –≤ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    if args.run_id:
        test_file = Path(args.results_dir) / f"run_{args.run_id}_test-result.json"
        test_file.touch()
    
    report = parse_allure_results(args.results_dir, args.run_id)
    print("\n–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:", report)
    
    asyncio.run(send_telegram_report(
        os.getenv("TELEGRAM_BOT_TOKEN"),
        os.getenv("TELEGRAM_CHAT_ID"),
        report,
        os.getenv("ALLURE_REPORT_URL")
    ))
    
