import json
import os
from pathlib import Path
from telegram import Bot
import asyncio
import time

def parse_infinite_results(results_dir="results"):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏"""
    stats = {"passed": 0, "failed": 0, "broken": 0, "skipped": 0, "total": 0}
    latest_files = []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    all_files = list(Path(results_dir).glob("*-result.*"))
    if not all_files:
        return {"error": "No result files found"}
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)
    all_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Å–∞ (–¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞)
    current_time = time.time()
    for result_file in all_files:
        file_age = current_time - result_file.stat().st_mtime
        if file_age < 3600:  # –§–∞–π–ª—ã –º–ª–∞–¥—à–µ 1 —á–∞—Å–∞
            latest_files.append(result_file)
        else:
            break
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —Ñ–∞–π–ª—ã
    for result_file in latest_files:
        try:
            with open(result_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                status = data.get("status", "").lower()
                if status in stats:
                    stats[status] += 1
                    stats["total"] += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {result_file}: {str(e)}")
    
    stats["success_rate"] = (stats["passed"] / stats["total"] * 100) if stats["total"] > 0 else 0
    stats["files_analyzed"] = len(latest_files)
    return stats

def should_send_notification(report):
    """–î–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∂–µ"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏–ª–∏ —Ä–∞–∑ –≤ N –ø—Ä–æ–≥–æ–Ω–æ–≤
    return report.get("failed", 0) > 2 or report.get("broken", 0) > 1

async def send_infinite_telegram_report(token, chat_id, report, report_url=None):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞"""
    bot = Bot(token=token)
    
    if report.get("error"):
        message = f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º –ø—Ä–æ–≥–æ–Ω–µ: {report['error']}"
    else:
        message = (
            "‚ôæÔ∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–≥–æ–Ω - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚è∞ –ê–Ω–∞–ª–∏–∑: –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å\n"
            f"üìä –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {report['files_analyzed']}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {report['passed']}\n"
            f"‚ùå –£–ø–∞–≤—à–∏–µ: {report['failed']}\n"
            f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: {report['broken']}\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['success_rate']:.2f}%"
        )
        
        if report_url:
            message += f"\n\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {report_url}"
    
    await bot.send_message(chat_id=chat_id, text=message)

if __name__ == "__main__":
    print("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞...")
    report = parse_infinite_results()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {report}")
    
    if should_send_notification(report):
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥–æ–Ω–µ")
        asyncio.run(send_infinite_telegram_report(
            os.getenv("TELEGRAM_BOT_TOKEN"),
            os.getenv("TELEGRAM_CHAT_ID"),
            report,
            os.getenv("ALLURE_REPORT_URL")
        ))
    else:
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–º–∞–ª–æ –æ—à–∏–±–æ–∫)")
